
Trying to use a non root user (called runner) when running the container...

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Problem 1. Need permission to chown files in /tmp
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

In runner.rb I chown files so I can control their ownership
after they've been tar-piped into the, eg, java-junit container.
I'm cheating here, by making the runner's uid:gid be the same
as the uid:gid of the sandbox user inside the java-junit container.
This approach won't work if I want to create readonly files
since runner.rb would then need to set the uid:gid of the readony
file to something other than its own uid:gid
Of course, I could avoid that by tar-piping all the files in and
then doing a [docker exec --user root] to chown the readonly files.

RUN addgroup -g 51966 runner
RUN adduser \
  -G runner `# group`       \
  -D        `# no password` \
  -H        `# no home dir` \
  -u 41966  `# user-id`     \
  runner    `# user-name`

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Problem 2. Need permission to run /var/run/docker.sock
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

On DockerToolbox for Mac, on the default VM
/etc/group has docker group with gid=100
This means /var/run/docker.sock has a gid=100
On an Alpine image (such as this), /etc/group
has a group called users with gid=100
So I just need to make my runner user a member of users!
Obvious problem with this is that the docker group
has different gids on different OS's.
For example, on Ubuntu 16.04 (in Google Computer Engine)
/etc/group also has a group called users with gid=100
but its docker group has a gid of 999
I can hack-solve that by making the user a member
of _multiple_ groups, each of which has the gid for
docker on a particular OS

RUN adduser runner users
